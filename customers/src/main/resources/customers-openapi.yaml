openapi: 3.0.0
info:
  title: API de Clientes
  version: 1.0.0
  description: API para la gestión de clientes
servers:
  - url: http://localhost:8080
    description: Servidor de desarrollo

components:
  schemas:
    CustomerRequest:
      type: object
      required:
        - customerType
        - phoneNumber
        - address
        - dni
        - firstName
        - lastName
        - isVIP
        - isPYME
      properties:
        customerType:
          type: string
          enum: [PERSONAL, BUSINESS]
          description: Tipo de cliente (PERSONAL o BUSINESS).
        email:
          type: string
          format: email
          description: Correo electrónico del cliente
        phoneNumber:
          type: string
          description: Número de teléfono del cliente
        address:
          type: string
          description: Dirección del cliente
        dni:
          type: string
          description: DNI del cliente
          pattern: "^[0-9]{8}[A-Z]$"
        firstName:
          type: string
          description: Nombre del cliente
        lastName:
          type: string
          description: Apellido del cliente
        isVIP:
          type: boolean
          description: Si es cliente VIP
        isPYME:
          type: boolean
          description: Si es cliente PYME

    CustomerResponse:
      type: object
      properties:
        id:
          type: string
          description: ID del cliente
        customerType:
          type: string
          enum: [PERSONAL, BUSINESS]
          description: Tipo de cliente (PERSONAL o BUSINESS).
        email:
          type: string
          format: email
          description: Correo electrónico del cliente
        phoneNumber:
          type: string
          description: Número de teléfono del cliente
        address:
          type: string
          description: Dirección del cliente
        dni:
          type: string
          description: DNI del cliente
        firstName:
          type: string
          description: Nombre del cliente
        lastName:
          type: string
          description: Apellido del cliente
        isVIP:
          type: boolean
          description: Si es cliente VIP
        isPYME:
          type: boolean
          description: Si es cliente PYME

    ProductsAvailable:
      type: object
      properties:
        productType:
          type: string
          description: tipo de producto
        productId:
          type: string
          description: ID del producto
        createdAt:
          type: string
          format: date-time
          description: Fecha de creación del producto

    ProductSummaryResponse:
      type: object
      properties:
        customerId:
          type: string
          description: ID del cliente
        customerType:
          type: string
          enum: [PERSONAL, BUSINESS]
          description: Tipo de cliente (PERSONAL o BUSINESS).
        firstName:
          type: string
          description: Nombre del cliente
        lastName:
          type: string
          description: Apellido del cliente
        isVIP:
          type: boolean
          description: Si es cliente VIP
        isPYME:
          type: boolean
          description: Si es cliente PYME
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductsAvailable'
          description: Lista de productos del cliente

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Fecha y hora del error
        path:
          type: string
          description: Ruta de la solicitud
        status:
          type: integer
          format: int32
          description: Código de estado HTTP
        error:
          type: string
          description: Mensaje de error corto
        requestId:
          type: string
          description: ID de la solicitud
        message:
          type: string
          description: Mensaje de error detallado
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token

paths:
  /customers:
    get:
      summary: Obtener todos los clientes.
      tags:
        - Clientes
      description: Devuelve una lista de todos los clientes.
      operationId: getAllCustomers
      responses:
        '200':
          description: Una lista de clientes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Crear un nuevo cliente.
      tags:
        - Clientes
      description: Crea un nuevo cliente basado en la información proporcionada.
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '201':
          description: Cliente creado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          description: Petición incorrecta.  Errores de validación o datos de entrada inválidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers/{id}:
    get:
      summary: Obtener un cliente por ID.
      tags:
        - Clientes
      description: Devuelve un único cliente basado en el ID proporcionado.
      operationId: getCustomerById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: El ID del cliente a obtener.
      responses:
        '200':
          description: Cliente obtenido exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          description: Cliente no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Actualizar un cliente por ID.
      tags:
        - Clientes
      description: Actualiza un cliente existente basado en el ID proporcionado y los datos.
      operationId: updateCustomerById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: El ID del cliente a actualizar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '200':
          description: Cliente actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          description: Petición incorrecta.  Errores de validación o datos de entrada inválidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Cliente no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Eliminar un cliente por ID.
      tags:
        - Clientes
      description: Elimina un cliente existente basado en el ID proporcionado.
      operationId: deleteCustomerById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: El ID del cliente a eliminar.
      responses:
        '204':
          description: Cliente eliminado exitosamente (sin contenido devuelto).
        '404':
          description: Cliente no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers/{id}/product-summary:
    get:
      summary: Obtener resumen de productos de un cliente por ID.
      tags:
        - Clientes
      description: Devuelve un único cliente basado en el ID proporcionado.
      operationId: getCustomerProductSummaryById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: El ID del cliente a obtener.
      responses:
        '200':
          description: Resumen de productos obtenido exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductSummaryResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers/dni/{dni}:
    get:
      summary: Obtener un cliente por DNI.
      tags:
        - Clientes
      description: Devuelve un único cliente basado en el DNI proporcionado.
      operationId: getCustomerByDni
      parameters:
        - in: path
          name: dni
          required: true
          schema:
            type: string
            pattern: "^[0-9]{8}[A-Z]$"
          description: El DNI del cliente a obtener.
      responses:
        '200':
          description: Cliente obtenido exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          description: Cliente no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers/dni/{dni}/login:
    post:
      summary: Iniciar sesión con DNI.
      tags:
        - Clientes
      description: Inicia sesión utilizando el DNI y devuelve un token JWT.
      operationId: loginCustomer
      parameters:
        - in: path
          name: dni
          required: true
          schema:
            type: string
            pattern: "^[0-9]{8}[A-Z]$"
          description: El DNI del cliente a obtener.
      responses:
        '200':
          description: Cliente obtenido exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '404':
          description: Cliente no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'